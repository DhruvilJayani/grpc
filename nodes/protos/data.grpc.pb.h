// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: data.proto
#ifndef GRPC_data_2eproto__INCLUDED
#define GRPC_data_2eproto__INCLUDED

#include "data.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace crashrecord {

// Service to manage crash records
class CrashRecordService final {
 public:
  static constexpr char const* service_full_name() {
    return "crashrecord.CrashRecordService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::crashrecord::CreateCrashRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::CreateCrashRecordResponse>> AsyncCreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::CreateCrashRecordResponse>>(AsyncCreateCrashRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::CreateCrashRecordResponse>> PrepareAsyncCreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::CreateCrashRecordResponse>>(PrepareAsyncCreateCrashRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::crashrecord::GetCrashRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::GetCrashRecordResponse>> AsyncGetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::GetCrashRecordResponse>>(AsyncGetCrashRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::GetCrashRecordResponse>> PrepareAsyncGetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::GetCrashRecordResponse>>(PrepareAsyncGetCrashRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status ListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::crashrecord::ListCrashRecordsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::ListCrashRecordsResponse>> AsyncListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::ListCrashRecordsResponse>>(AsyncListCrashRecordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::ListCrashRecordsResponse>> PrepareAsyncListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::ListCrashRecordsResponse>>(PrepareAsyncListCrashRecordsRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::crashrecord::DeleteCrashRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::DeleteCrashRecordResponse>> AsyncDeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::DeleteCrashRecordResponse>>(AsyncDeleteCrashRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::DeleteCrashRecordResponse>> PrepareAsyncDeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::DeleteCrashRecordResponse>>(PrepareAsyncDeleteCrashRecordRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest* request, ::crashrecord::CreateCrashRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest* request, ::crashrecord::CreateCrashRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest* request, ::crashrecord::GetCrashRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest* request, ::crashrecord::GetCrashRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest* request, ::crashrecord::ListCrashRecordsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest* request, ::crashrecord::ListCrashRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest* request, ::crashrecord::DeleteCrashRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest* request, ::crashrecord::DeleteCrashRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::CreateCrashRecordResponse>* AsyncCreateCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::CreateCrashRecordResponse>* PrepareAsyncCreateCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::GetCrashRecordResponse>* AsyncGetCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::GetCrashRecordResponse>* PrepareAsyncGetCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::ListCrashRecordsResponse>* AsyncListCrashRecordsRaw(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::ListCrashRecordsResponse>* PrepareAsyncListCrashRecordsRaw(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::DeleteCrashRecordResponse>* AsyncDeleteCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::crashrecord::DeleteCrashRecordResponse>* PrepareAsyncDeleteCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::crashrecord::CreateCrashRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::CreateCrashRecordResponse>> AsyncCreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::CreateCrashRecordResponse>>(AsyncCreateCrashRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::CreateCrashRecordResponse>> PrepareAsyncCreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::CreateCrashRecordResponse>>(PrepareAsyncCreateCrashRecordRaw(context, request, cq));
    }
    ::grpc::Status GetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::crashrecord::GetCrashRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::GetCrashRecordResponse>> AsyncGetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::GetCrashRecordResponse>>(AsyncGetCrashRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::GetCrashRecordResponse>> PrepareAsyncGetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::GetCrashRecordResponse>>(PrepareAsyncGetCrashRecordRaw(context, request, cq));
    }
    ::grpc::Status ListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::crashrecord::ListCrashRecordsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::ListCrashRecordsResponse>> AsyncListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::ListCrashRecordsResponse>>(AsyncListCrashRecordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::ListCrashRecordsResponse>> PrepareAsyncListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::ListCrashRecordsResponse>>(PrepareAsyncListCrashRecordsRaw(context, request, cq));
    }
    ::grpc::Status DeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::crashrecord::DeleteCrashRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::DeleteCrashRecordResponse>> AsyncDeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::DeleteCrashRecordResponse>>(AsyncDeleteCrashRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::DeleteCrashRecordResponse>> PrepareAsyncDeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::crashrecord::DeleteCrashRecordResponse>>(PrepareAsyncDeleteCrashRecordRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest* request, ::crashrecord::CreateCrashRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCrashRecord(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest* request, ::crashrecord::CreateCrashRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest* request, ::crashrecord::GetCrashRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCrashRecord(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest* request, ::crashrecord::GetCrashRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest* request, ::crashrecord::ListCrashRecordsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCrashRecords(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest* request, ::crashrecord::ListCrashRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest* request, ::crashrecord::DeleteCrashRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteCrashRecord(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest* request, ::crashrecord::DeleteCrashRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::crashrecord::CreateCrashRecordResponse>* AsyncCreateCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crashrecord::CreateCrashRecordResponse>* PrepareAsyncCreateCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::CreateCrashRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crashrecord::GetCrashRecordResponse>* AsyncGetCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crashrecord::GetCrashRecordResponse>* PrepareAsyncGetCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::GetCrashRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crashrecord::ListCrashRecordsResponse>* AsyncListCrashRecordsRaw(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crashrecord::ListCrashRecordsResponse>* PrepareAsyncListCrashRecordsRaw(::grpc::ClientContext* context, const ::crashrecord::ListCrashRecordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crashrecord::DeleteCrashRecordResponse>* AsyncDeleteCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::crashrecord::DeleteCrashRecordResponse>* PrepareAsyncDeleteCrashRecordRaw(::grpc::ClientContext* context, const ::crashrecord::DeleteCrashRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCrashRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCrashRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCrashRecords_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCrashRecord_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateCrashRecord(::grpc::ServerContext* context, const ::crashrecord::CreateCrashRecordRequest* request, ::crashrecord::CreateCrashRecordResponse* response);
    virtual ::grpc::Status GetCrashRecord(::grpc::ServerContext* context, const ::crashrecord::GetCrashRecordRequest* request, ::crashrecord::GetCrashRecordResponse* response);
    virtual ::grpc::Status ListCrashRecords(::grpc::ServerContext* context, const ::crashrecord::ListCrashRecordsRequest* request, ::crashrecord::ListCrashRecordsResponse* response);
    virtual ::grpc::Status DeleteCrashRecord(::grpc::ServerContext* context, const ::crashrecord::DeleteCrashRecordRequest* request, ::crashrecord::DeleteCrashRecordResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCrashRecord() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::CreateCrashRecordRequest* /*request*/, ::crashrecord::CreateCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCrashRecord(::grpc::ServerContext* context, ::crashrecord::CreateCrashRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::crashrecord::CreateCrashRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCrashRecord() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::GetCrashRecordRequest* /*request*/, ::crashrecord::GetCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCrashRecord(::grpc::ServerContext* context, ::crashrecord::GetCrashRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::crashrecord::GetCrashRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCrashRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCrashRecords() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListCrashRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCrashRecords(::grpc::ServerContext* /*context*/, const ::crashrecord::ListCrashRecordsRequest* /*request*/, ::crashrecord::ListCrashRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCrashRecords(::grpc::ServerContext* context, ::crashrecord::ListCrashRecordsRequest* request, ::grpc::ServerAsyncResponseWriter< ::crashrecord::ListCrashRecordsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCrashRecord() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::DeleteCrashRecordRequest* /*request*/, ::crashrecord::DeleteCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCrashRecord(::grpc::ServerContext* context, ::crashrecord::DeleteCrashRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::crashrecord::DeleteCrashRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateCrashRecord<WithAsyncMethod_GetCrashRecord<WithAsyncMethod_ListCrashRecords<WithAsyncMethod_DeleteCrashRecord<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCrashRecord() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::crashrecord::CreateCrashRecordRequest, ::crashrecord::CreateCrashRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crashrecord::CreateCrashRecordRequest* request, ::crashrecord::CreateCrashRecordResponse* response) { return this->CreateCrashRecord(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCrashRecord(
        ::grpc::MessageAllocator< ::crashrecord::CreateCrashRecordRequest, ::crashrecord::CreateCrashRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crashrecord::CreateCrashRecordRequest, ::crashrecord::CreateCrashRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::CreateCrashRecordRequest* /*request*/, ::crashrecord::CreateCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCrashRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::crashrecord::CreateCrashRecordRequest* /*request*/, ::crashrecord::CreateCrashRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCrashRecord() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::crashrecord::GetCrashRecordRequest, ::crashrecord::GetCrashRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crashrecord::GetCrashRecordRequest* request, ::crashrecord::GetCrashRecordResponse* response) { return this->GetCrashRecord(context, request, response); }));}
    void SetMessageAllocatorFor_GetCrashRecord(
        ::grpc::MessageAllocator< ::crashrecord::GetCrashRecordRequest, ::crashrecord::GetCrashRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crashrecord::GetCrashRecordRequest, ::crashrecord::GetCrashRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::GetCrashRecordRequest* /*request*/, ::crashrecord::GetCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCrashRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::crashrecord::GetCrashRecordRequest* /*request*/, ::crashrecord::GetCrashRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListCrashRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListCrashRecords() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::crashrecord::ListCrashRecordsRequest, ::crashrecord::ListCrashRecordsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crashrecord::ListCrashRecordsRequest* request, ::crashrecord::ListCrashRecordsResponse* response) { return this->ListCrashRecords(context, request, response); }));}
    void SetMessageAllocatorFor_ListCrashRecords(
        ::grpc::MessageAllocator< ::crashrecord::ListCrashRecordsRequest, ::crashrecord::ListCrashRecordsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crashrecord::ListCrashRecordsRequest, ::crashrecord::ListCrashRecordsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListCrashRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCrashRecords(::grpc::ServerContext* /*context*/, const ::crashrecord::ListCrashRecordsRequest* /*request*/, ::crashrecord::ListCrashRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCrashRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::crashrecord::ListCrashRecordsRequest* /*request*/, ::crashrecord::ListCrashRecordsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCrashRecord() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::crashrecord::DeleteCrashRecordRequest, ::crashrecord::DeleteCrashRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::crashrecord::DeleteCrashRecordRequest* request, ::crashrecord::DeleteCrashRecordResponse* response) { return this->DeleteCrashRecord(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCrashRecord(
        ::grpc::MessageAllocator< ::crashrecord::DeleteCrashRecordRequest, ::crashrecord::DeleteCrashRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::crashrecord::DeleteCrashRecordRequest, ::crashrecord::DeleteCrashRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::DeleteCrashRecordRequest* /*request*/, ::crashrecord::DeleteCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCrashRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::crashrecord::DeleteCrashRecordRequest* /*request*/, ::crashrecord::DeleteCrashRecordResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateCrashRecord<WithCallbackMethod_GetCrashRecord<WithCallbackMethod_ListCrashRecords<WithCallbackMethod_DeleteCrashRecord<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCrashRecord() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::CreateCrashRecordRequest* /*request*/, ::crashrecord::CreateCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCrashRecord() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::GetCrashRecordRequest* /*request*/, ::crashrecord::GetCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCrashRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCrashRecords() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListCrashRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCrashRecords(::grpc::ServerContext* /*context*/, const ::crashrecord::ListCrashRecordsRequest* /*request*/, ::crashrecord::ListCrashRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCrashRecord() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::DeleteCrashRecordRequest* /*request*/, ::crashrecord::DeleteCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCrashRecord() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::CreateCrashRecordRequest* /*request*/, ::crashrecord::CreateCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCrashRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCrashRecord() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::GetCrashRecordRequest* /*request*/, ::crashrecord::GetCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCrashRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCrashRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCrashRecords() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListCrashRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCrashRecords(::grpc::ServerContext* /*context*/, const ::crashrecord::ListCrashRecordsRequest* /*request*/, ::crashrecord::ListCrashRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCrashRecords(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCrashRecord() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::DeleteCrashRecordRequest* /*request*/, ::crashrecord::DeleteCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCrashRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCrashRecord() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCrashRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::CreateCrashRecordRequest* /*request*/, ::crashrecord::CreateCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCrashRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCrashRecord() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCrashRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::GetCrashRecordRequest* /*request*/, ::crashrecord::GetCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCrashRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListCrashRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListCrashRecords() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCrashRecords(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListCrashRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCrashRecords(::grpc::ServerContext* /*context*/, const ::crashrecord::ListCrashRecordsRequest* /*request*/, ::crashrecord::ListCrashRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCrashRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCrashRecord() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCrashRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::DeleteCrashRecordRequest* /*request*/, ::crashrecord::DeleteCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCrashRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCrashRecord() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crashrecord::CreateCrashRecordRequest, ::crashrecord::CreateCrashRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crashrecord::CreateCrashRecordRequest, ::crashrecord::CreateCrashRecordResponse>* streamer) {
                       return this->StreamedCreateCrashRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::CreateCrashRecordRequest* /*request*/, ::crashrecord::CreateCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCrashRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crashrecord::CreateCrashRecordRequest,::crashrecord::CreateCrashRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCrashRecord() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crashrecord::GetCrashRecordRequest, ::crashrecord::GetCrashRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crashrecord::GetCrashRecordRequest, ::crashrecord::GetCrashRecordResponse>* streamer) {
                       return this->StreamedGetCrashRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::GetCrashRecordRequest* /*request*/, ::crashrecord::GetCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCrashRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crashrecord::GetCrashRecordRequest,::crashrecord::GetCrashRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCrashRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCrashRecords() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crashrecord::ListCrashRecordsRequest, ::crashrecord::ListCrashRecordsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crashrecord::ListCrashRecordsRequest, ::crashrecord::ListCrashRecordsResponse>* streamer) {
                       return this->StreamedListCrashRecords(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCrashRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCrashRecords(::grpc::ServerContext* /*context*/, const ::crashrecord::ListCrashRecordsRequest* /*request*/, ::crashrecord::ListCrashRecordsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCrashRecords(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crashrecord::ListCrashRecordsRequest,::crashrecord::ListCrashRecordsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCrashRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCrashRecord() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::crashrecord::DeleteCrashRecordRequest, ::crashrecord::DeleteCrashRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::crashrecord::DeleteCrashRecordRequest, ::crashrecord::DeleteCrashRecordResponse>* streamer) {
                       return this->StreamedDeleteCrashRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCrashRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCrashRecord(::grpc::ServerContext* /*context*/, const ::crashrecord::DeleteCrashRecordRequest* /*request*/, ::crashrecord::DeleteCrashRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCrashRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::crashrecord::DeleteCrashRecordRequest,::crashrecord::DeleteCrashRecordResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateCrashRecord<WithStreamedUnaryMethod_GetCrashRecord<WithStreamedUnaryMethod_ListCrashRecords<WithStreamedUnaryMethod_DeleteCrashRecord<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateCrashRecord<WithStreamedUnaryMethod_GetCrashRecord<WithStreamedUnaryMethod_ListCrashRecords<WithStreamedUnaryMethod_DeleteCrashRecord<Service > > > > StreamedService;
};

}  // namespace crashrecord


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_data_2eproto__INCLUDED
